import { useState, useContext, useEffect } from 'react';
import { 
  Container, 
  Typography, 
  Box, 
  Tabs, 
  Tab, 
  Paper, 
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert
} from '@mui/material';
import { useNavigate } from 'react-router-dom';
import { DocumentContext } from '../context/DocumentContext';
import Summaries from '../components/StudyTools/Summaries';
import Flashcards from '../components/StudyTools/Flashcards';
//import QuizGenerator from '../components/StudyTools/QuizGenerator';

function StudyTools() {
  const navigate = useNavigate();
  const { documents, activeDocument, setActiveDocument } = useContext(DocumentContext);
  const [activeTab, setActiveTab] = useState(0);
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedContent, setGeneratedContent] = useState(null);

  useEffect(() => {
    if (documents.length === 0) {
      navigate('/documents');
    }
  }, [documents, navigate]);

  const handleTabChange = (event, newValue) => {
    setActiveTab(newValue);
    setGeneratedContent(null);
  };

  const handleDocumentChange = (event) => {
    const selectedDoc = documents.find(doc => doc.id === event.target.value);
    setActiveDocument(selectedDoc);
    setGeneratedContent(null);
  };

  const handleGenerate = () => {
    if (!activeDocument) return;
    
    setIsGenerating(true);
    
    // Simulate generation (this would connect to your backend in production)
    setTimeout(() => {
      let content;
      
      switch (activeTab) {
        case 0: // Summaries
          content = {
            type: 'summary',
            data: {
              title: `Summary of ${activeDocument.name}`,
              sections: [
                {
                  heading: 'Main Concepts',
                  content: 'This is a simulated summary that would be generated by the backend in a real implementation. It would extract the key concepts from the document.'
                },
                {
                  heading: 'Key Points',
                  content: 'In a real implementation, this would contain the most important points from the document, extracted and summarized by an LLM with RAG.'
                }
              ]
            }
          };
          break;
          
        case 1: // Flashcards
          content = {
            type: 'flashcards',
            data: [
              {
                id: 1,
                front: 'What is a Retrieval Augmented Generation (RAG) pipeline?',
                back: 'A system that combines information retrieval with text generation to create responses grounded in specific documents or knowledge bases.'
              },
              {
                id: 2,
                front: 'What libraries can be used for PDF text extraction?',
                back: 'PyMuPDF (fitz) is a high-performance open-source library for data extraction from PDFs.'
              },
              {
                id: 3,
                front: 'What is a vector database used for in a study assistant?',
                back: 'It stores vector embeddings of document chunks for fast similarity search to retrieve relevant content when answering questions.'
              }
            ]
          };
          break;
          
        case 2: // Quiz
          content = {
            type: 'quiz',
            data: {
              title: `Quiz on ${activeDocument.name}`,
              questions: [
                {
                  id: 1,
                  type: 'multiple-choice',
                  question: 'Which of these is NOT mentioned as a core feature of the study assistant app?',
                  options: [
                    'PDF and Word document upload',
                    'Chat-based Q&A',
                    'Video lecture analysis',
                    'Displaying answers grounded in source text'
                  ],
                  correctAnswer: 2
                },
                {
                  id: 2,
                  type: 'true-false',
                  question: 'PyMuPDF is also called fitz.',
                  correctAnswer: true
                },
                {
                  id: 3,
                  type: 'short-answer',
                  question: 'What free vector database is written in Rust?',
                  correctAnswer: 'Qdrant'
                }
              ]
            }
          };
          break;
          
        default:
          content = null;
      }
      
      setGeneratedContent(content);
      setIsGenerating(false);
    }, 1500);
  };

  return (
    <Container maxWidth="lg">
      <Typography variant="h4" component="h1" gutterBottom>
        Study Tools
      </Typography>
      <Typography variant="body1" paragraph>
        Generate study materials from your documents to enhance your learning.
      </Typography>
      
      {documents.length > 0 ? (
        <>
          <Box mb={3}>
            <FormControl fullWidth variant="outlined">
              <InputLabel>Select Document</InputLabel>
              <Select
                value={activeDocument ? activeDocument.id : ''}
                onChange={handleDocumentChange}
                label="Select Document"
              >
                {documents.map((doc) => (
                  <MenuItem key={doc.id} value={doc.id}>
                    {doc.name}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Box>
          
          <Paper sx={{ mb: 3 }}>
            <Tabs 
              value={activeTab} 
              onChange={handleTabChange} 
              variant="fullWidth"
            >
              <Tab label="Summaries" />
              <Tab label="Flashcards" />
              <Tab label="Quiz Generator" />
            </Tabs>
          </Paper>
          
          {activeDocument ? (
            <>
              <Box mb={3} display="flex" justifyContent="flex-end">
                <Button
                  variant="contained"
                  color="primary"
                  onClick={handleGenerate}
                  disabled={isGenerating}
                >
                  {isGenerating ? 'Generating...' : 'Generate'}
                </Button>
              </Box>
              
              <Paper sx={{ p: 3, minHeight: '400px' }}>
                {activeTab === 0 && (
                  <Summaries 
                    document={activeDocument}
                    isGenerating={isGenerating}
                    content={generatedContent?.type === 'summary' ? generatedContent.data : null}
                  />
                )}
                
                {activeTab === 1 && (
                  <Flashcards 
                    document={activeDocument}
                    isGenerating={isGenerating}
                    flashcards={generatedContent?.type === 'flashcards' ? generatedContent.data : null}
                  />
                )}
                
                {activeTab === 2 && (
                  <QuizGenerator 
                    document={activeDocument}
                    isGenerating={isGenerating}
                    quiz={generatedContent?.type === 'quiz' ? generatedContent.data : null}
                  />
                )}
              </Paper>
            </>
          ) : (
            <Alert severity="info">
              Please select a document to generate study materials.
            </Alert>
          )}
        </>
      ) : (
        <Alert severity="warning">
          You need to upload documents before you can use the study tools.
        </Alert>
      )}
    </Container>
  );
}

export default StudyTools;